/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
 public TreeNode deleteNode(TreeNode root, int key) {
        if (root==null){
            return null;
        }
        
        if (key==root.val){
            if (root.right==null){
                return root.left;
            }
            if (root.left==null) {
                return root.right;
            }
            
            TreeNode m=findMin(root.right);
            root.val=m.val;
            root.right=deleteNode(root.right, m.val);
            
        }
        else if (key>root.val){
            root.right=deleteNode(root.right, key);
        }
        else{
            root.left=deleteNode(root.left, key);
        }
        return root;
    }
    
    
    private TreeNode findMin(TreeNode root){
        if (root.left!=null){
            return findMin(root.left);
        }
        else{
            return root;
        }
    }
}
